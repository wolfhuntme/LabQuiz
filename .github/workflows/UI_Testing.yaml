name: UI Security Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  ui-tests:
    name: Selenium UI Tests
    runs-on: ubuntu-latest
    
    services:
      selenium:
        image: selenium/standalone-chrome:latest
        options: --shm-size=2gb
        ports:
          - 4444:4444
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        extensions: curl, mbstring
        
    - name: Start PHP built-in server
      run: |
        cd web
        php -S localhost:8080 &
        sleep 3
        echo "âœ… PHP server started on http://localhost:8080"
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install test dependencies
      run: |
        npm install
        echo "âœ… Test dependencies installed"
        
    - name: Create Selenium test
      run: |
        mkdir -p tests
        cat > tests/selenium-ui-tests.js << 'EOF'
        const { Builder, By, until } = require('selenium-webdriver');
        const assert = require('assert');

        describe('Security UI Tests', function() {
          this.timeout(30000);
          let driver;

          before(async function() {
            driver = await new Builder()
              .forBrowser('chrome')
              .usingServer('http://localhost:4444/wd/hub')
              .build();
          });

          after(async function() {
            await driver.quit();
          });

          it('should load homepage successfully', async function() {
            await driver.get('http://localhost:8080/index.php');
            const title = await driver.getTitle();
            assert(title.includes('Search Application'));
            console.log('âœ… Homepage loads successfully');
          });

          it('should detect and block XSS attacks', async function() {
            await driver.get('http://localhost:8080/index.php');
            
            const searchBox = await driver.findElement(By.id('search_term'));
            await searchBox.sendKeys('<script>alert("XSS")</script>');
            
            const submitButton = await driver.findElement(By.css('input[type="submit"]'));
            await submitButton.click();
            
            await driver.wait(until.elementLocated(By.css('p[style*="color: red"]')), 5000);
            const errorMsg = await driver.findElement(By.css('p[style*="color: red"]')).getText();
            
            assert(errorMsg.includes('XSS attack detected'));
            console.log('âœ… XSS protection working');
          });

          it('should detect and block SQL injection', async function() {
            await driver.get('http://localhost:8080/index.php');
            
            const searchBox = await driver.findElement(By.id('search_term'));
            await searchBox.clear();
            await searchBox.sendKeys("' OR 1=1--");
            
            const submitButton = await driver.findElement(By.css('input[type="submit"]'));
            await submitButton.click();
            
            await driver.wait(until.elementLocated(By.css('p[style*="color: red"]')), 5000);
            const errorMsg = await driver.findElement(By.css('p[style*="color: red"]')).getText();
            
            assert(errorMsg.includes('SQL injection detected'));
            console.log('âœ… SQL injection protection working');
          });

          it('should allow safe input and redirect', async function() {
            await driver.get('http://localhost:8080/index.php');
            
            const searchBox = await driver.findElement(By.id('search_term'));
            await searchBox.clear();
            await searchBox.sendKeys('Hello World');
            
            const submitButton = await driver.findElement(By.css('input[type="submit"]'));
            await submitButton.click();
            
            await driver.wait(until.urlContains('results.php'), 5000);
            const currentUrl = await driver.getCurrentUrl();
            
            assert(currentUrl.includes('results.php'));
            assert(currentUrl.includes('q=Hello+World'));
            console.log('âœ… Safe input processed correctly');
          });
        });
        EOF
        
    - name: Run UI tests
      run: |
        echo "ðŸ§ª Running Selenium UI tests..."
        npm test
        
    - name: Test Summary
      if: always()
      run: |
        echo "ðŸ“Š UI Testing completed"
        echo "âœ… All security tests executed"